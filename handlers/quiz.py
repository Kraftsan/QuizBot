import json
from aiogram import Router, types, F
from aiogram.filters import Command
from data.quiz_data import quiz_data
from keyboards.builders import generate_options_keyboard, get_main_menu_keyboard, get_thanks_keyboard
from database import update_quiz_state, get_quiz_state, save_user_stats

router = Router()


async def new_quiz(message: types.Message):
    user_id = message.from_user.id
    await update_quiz_state(user_id, 0, json.dumps([]))
    await get_question(message, user_id)


async def finish_quiz(message: types.Message, user_id: int, answers: list):
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º
    scores = {'programming': 0, 'animals': 0, 'tech': 0}
    topic_questions_count = {'programming': 0, 'animals': 0, 'tech': 0}

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    for question in quiz_data:
        topic_questions_count[question['topic']] += 1

    # –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —Ç–µ–º–∞–º
    for i, is_correct in enumerate(answers):
        if i < len(quiz_data):
            topic = quiz_data[i]['topic']
            if is_correct:
                scores[topic] += 1

    total_score = sum(scores.values())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_data = {
        'user_id': user_id,
        'username': message.from_user.username or message.from_user.first_name,
        'total_score': total_score
    }
    await save_user_stats(user_data)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–µ–º (—Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    max_score = max(scores.values())
    recommended_topics = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
    for topic, score in scores.items():
        if score == max_score:
            recommended_topics.append(topic)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = (
        f"<b>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: {scores['programming']}/{topic_questions_count['programming']}\n"
        f"‚Ä¢ –ñ–∏–≤–æ—Ç–Ω—ã–µ: {scores['animals']}/{topic_questions_count['animals']}\n"
        f"‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {scores['tech']}/{topic_questions_count['tech']}\n"
        f"‚Ä¢ –û–±—â–∏–π —Å—á–µ—Ç: {total_score}/{len(quiz_data)}\n\n"
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å –¥–∞—Ç–∞–º–∏
    dates = ["29 –æ–∫—Ç—è–±—Ä—è 2025", "30 –æ–∫—Ç—è–±—Ä—è 2025", "31 –æ–∫—Ç—è–±—Ä—è 2025"]
    topic_names = {
        'programming': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        'animals': '–í—Å–µ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö',
        'tech': '–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
    }

    if recommended_topics:
        result_message += "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –∫–≤–∏–∑—ã:\n"
        for i, topic in enumerate(recommended_topics):
            if i < len(dates):
                result_message += f"‚Ä¢ {topic_names[topic]} - {dates[i]}\n"

    result_message += "\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ —Ç–µ–º—É –¥–ª—è —É—á–∞—Å—Ç–∏—è!"

    await message.answer(result_message,
                        reply_markup=get_main_menu_keyboard(),
                        parse_mode="HTML")
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∞?",
                        reply_markup=get_thanks_keyboard())


async def get_question(message: types.Message, user_id: int):
    question_index, answers_json = await get_quiz_state(user_id)

    if question_index >= len(quiz_data):
        await finish_quiz(message, user_id, json.loads(answers_json))
        return

    current_question = quiz_data[question_index]
    correct_index = current_question['correct_option']
    opts = current_question['options']

    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(
        f"<b>–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(quiz_data)}:</b>\n"
        f"{current_question['question']}",
        reply_markup=kb,
        parse_mode="HTML"
    )


async def process_answer(callback: types.CallbackQuery, is_correct: bool):
    user_id = callback.from_user.id
    question_index, answers_json = await get_quiz_state(user_id)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
    answers = json.loads(answers_json)
    answers.append(is_correct)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if is_correct:
        await callback.message.answer("<b>–í–µ—Ä–Ω–æ!</b>", parse_mode="HTML")
    else:
        correct_option = quiz_data[question_index]['options'][quiz_data[question_index]['correct_option']]
        await callback.message.answer(
            f"<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:<span class='tg-spoiler'> {correct_option}</span>",
            parse_mode="HTML"
        )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    question_index += 1
    await update_quiz_state(user_id, question_index, json.dumps(answers))
    await get_question(callback.message, user_id)


@router.callback_query(F.data == "right_answer")
async def right_answer(callback: types.CallbackQuery):
    await process_answer(callback, True)


@router.callback_query(F.data == "wrong_answer")
async def wrong_answer(callback: types.CallbackQuery):
    await process_answer(callback, False)


@router.callback_query(F.data == "thanks_author")
async def thanks_author(callback: types.CallbackQuery):
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ, —Ç—ã –∫–ª–∞—Å—Å–Ω—ã–π –¥–µ—Ä–∂–∏ –ø–∏–≤–∫–∞ üç∫, –∞ –µ—Å–ª–∏ —Ç—ã –∫–ª–∞—Å—Å–Ω–∞—è –¥–µ—Ä–∂–∏ —Ü–≤–µ—Ç–æ—á–∫–∏ üíê! üòä")


@router.message(F.text == "–Ø —Å–∞–º—ã–π —É–º–Ω—ã–π")
@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑. –£–¥–∞—á–∏!", reply_markup=None)
    await new_quiz(message)


@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å —à–∞–π—Ç–∞–Ω –º–∞—à–∏–Ω–∞")
async def stop_quiz(message: types.Message):
    await message.answer("–ö–≤–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–∂–º–∏ '–Ø —Å–∞–º—ã–π —É–º–Ω—ã–π' .... –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–º–∏",
                         reply_markup=get_main_menu_keyboard())